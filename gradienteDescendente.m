function [theta, J_history] = gradienteDescendente(X, y, theta, alpha, num_iters)


% inicializaci칩n de algunos valores importantes
m = length(y); % n칰mero de training examples
J_history = zeros(num_iters, 1);

for iter = 1:num_iters

    % ====================== SU C칍DIGO ======================
    % Instrucciones: Ejecute actualizaci칩n de par치metros
    %
    % Nota: Para debuggear podr칤a ir imprimiendo el costo, con los par치metros encontrados en cada iteraci칩n
    %
    
    % Set de datos
    x = X(:, 2);
    
    % Hipotesis
    h = theta(1) + (theta(2) * x);

    % Actualizaci蚤 simult烱ea
    theta0 = theta(1) - alpha * (1 / m) * sum(h - y);
    theta1  = theta(2) - alpha * (1 / m) * sum((h - y) .* x);

    theta = [theta0; theta1];
    
    % ============================================================

    % Guardar el costo J de cada iteraci칩n
    % -esto no es necesario, pero lo usaremos para graficar m치s adelante-
    J_history(iter) = costo(X, y, theta);

end

end
